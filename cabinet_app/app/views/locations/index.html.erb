

<style type="text/css">
      body { background: white; }
    </style>



<script>
$(function(){ 

  alert('reload');

    var locs = [];
    //var locations = [];
    var sorted_locs_by_distance = [];
    var current_loc_networks = [];
    var cur_lat;
    var cur_lng;
    var map;
    var infowindow;
    var geocoder;
    var current_location = {};
    var cur_loc = {};

    <% @locations.each do |loc| %>
        var obj = {
          name: "<%= loc.name %>",
          lat: <%= loc.lat %>,
          lng: <%= loc.lng %>,
          pwd: "<%= loc.pwd %>",
          address: "<%= loc.address %>",
          distance: 0,
          markerPlaced: false,
          id: <%= loc.id %>
        };
      locs.push(obj);
    <% end %>

    //console.log(locs);

    (function(){

    //Gets current location coordinates  
    function getLocation()
    {
      if (navigator.geolocation)
      {
          var options = {
              enableHighAccuracy: true,
              timeout: 5000,
              maximumAge: 0
          };
          navigator.geolocation.getCurrentPosition( success, error,options);
      }
      else
      { x.innerHTML= "Geolocation is not supported by this browser."; }
    }

    function error(e) {
      console.log("error code:" + e.code + 'message: ' + e.message );
    }

    // If current location request was successful, initializes location
    function success(position) {
      cur_loc.lat  = position.coords.latitude;
      cur_loc.lng =  position.coords.longitude;
      current_location.lat  = position.coords.latitude;
      current_location.lng =  position.coords.longitude;
      setupMap(cur_loc.lat, cur_loc.lng);
    }

    //Sets up map and adds markers for networks currently in db
    //Map centers on current_location
    function setupMap(lat, lng)
    {
      var  myLocation =   new google.maps.LatLng(lat, lng);
      cur_loc.lat = lat
      cur_loc.lng = lng

      var mapOptions = {
          center: new google.maps.LatLng(myLocation.lat(),myLocation.lng()),
          zoom: 11,
          streetViewControl: false,
          mapTypeControl: false,
          mapTypeId: google.maps.MapTypeId.ROADMAP,
          styles: [{"stylers":[{"visibility":"on"},{"saturation":-100}]},{"featureType":"water","stylers":[{"visibility":"on"},{"saturation":100},{"hue":"#00ffe6"}]},{"featureType":"road","elementType":"geometry","stylers":[{"saturation":100},{"hue":"#00ffcc"}]},{"featureType":"poi","stylers":[{"visibility":"off"}]},{"featureType":"poi.park","stylers":[{"visibility":"on"}]}]
      };

      map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);

      geocoder = new google.maps.Geocoder();

      addCurrentLocMarker(map);

      for (i=0; i<locs.length; i++)
      {
        addMarker(locs[i], map);
      }
      
      generate_list_by_distance(cur_loc);
      populateSideTab();
      
    }

    //Adds listeners/event handlers to marker
    function addMarkerListeners(marker)
    {
      google.maps.event.addListener(marker, 'click', (function(marker) {
          return function() {
            cur_loc.lat = marker.position.d;
            cur_loc.lng = marker.position.e;

            generate_list_by_distance(cur_loc);

            getCurrentLocNetworks(marker);
            if (current_loc_networks.length == 0)
            {
              google.maps.event.addListener(marker, 'click', (function(marker) {
                return function() {
                  reset_location(cur_loc);
                  cur_loc.lat = marker.position.d;
                  cur_loc.lng = marker.position.e; 
                  $('#content_box').removeClass("hidden");
                }
              })(marker));
            }
            populateSideTab();

            var content = "";
              for(var k=0; k<current_loc_networks.length; k++)
              {
                content += '<div id=' + current_loc_networks[k].id + '>' +
                '<h3>Name: '+ current_loc_networks[k].name + '</h3>'+
                '<h3>Location: ' + current_loc_networks[k].address + '</h3>' +
                '<h3>Password: ' + current_loc_networks[k].pwd + '</h3>' +
                '<p><a href=# class="start_edit">Edit</a> | <a href=# class="start_delete">Delete</a></p>' + 
                '<p><input type="text" class="share_email_field" placeholder="enter email"> ' + 
                '<a href=# class="start_share">Share</a></p></div><hr>';

              }

            infowindow = new google.maps.InfoWindow();

            infowindow.setContent(content);
            infowindow.open(map, marker);
            google.maps.event.addListener(infowindow, 'domready', function() {
              $('.start_edit').click(function(e) {
                  var div = $(this).closest('div');
                  var id = div[0].id;
                  $('#edit_content_box').removeClass("hidden");
                  editNetwork(id);
              });

              $('.start_delete').click(function(e) {
                  var div = $(this).closest('div');
                  deleteNetwork(div[0].id);
              });

              $('.start_share').click(function(e) {
                  var div = $(this).closest('div');
                  shareNetwork(div[0].id);
              });
            });
          }
        })(marker));
    }

    //Adds a marker to the map
    function addMarker(loc, map)
    {
        marker = new google.maps.Marker({
          position: new google.maps.LatLng(loc.lat, loc.lng),
          map: map,
          icon: 'http://www.nico-castro-files.com/saved_loc.svg',
          //animation: google.maps.Animation.DROP
        });

        addMarkerListeners(marker);
    }

    //Adds marker for current GPS location
    function addCurrentLocMarker(map)
    {
      marker = new google.maps.Marker({
          position: new google.maps.LatLng(current_location.lat, current_location.lng),
          map: map,
          icon: 'http://www.nico-castro-files.com/current_loc.svg',
          animation: google.maps.Animation.DROP
        });

      addMarkerListeners(marker);
      
    }

    //Adds markers and event handlers for search result marker
    function addNewLocMarker(loc, map)
    {
      marker = new google.maps.Marker({
          position: new google.maps.LatLng(loc.lat, loc.lng),
          map: map,
          icon: 'http://www.nico-castro-files.com/new_loc.svg',
          animation: google.maps.Animation.DROP
        });

      google.maps.event.addListener(marker, 'click', (function(marker) {
        return function() {
          reset_location(cur_loc);
          cur_loc.lat = marker.position.d;
          cur_loc.lng = marker.position.e; 
          $('#content_box').removeClass("hidden");
        }
      })(marker));
    }

    //Finds all the networks presents in a radius of 10 meters from active location
    function getCurrentLocNetworks(marker)
    {
      current_loc_networks = [];
      generate_list_by_distance(cur_loc);
      for(var i=0; i<sorted_locs_by_distance.length; i++)
      {
        if (sorted_locs_by_distance[i].distance < 0.01)
        {
          current_loc_networks.push(sorted_locs_by_distance[i]);
        }
        else
          break;
      }

    }

    //AJAX call to add new network to DB
    //Also updates map
    function add_loc_to_db(loc)
    {
      $.ajax({
            url: "/locations",
            type: "POST",
            beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
            data: { lat: loc.lat, lng: loc.lng, name: loc.name, address: loc.address, pwd: loc.pwd },
            success: function(data){
              //console.log(data);
              var obj = {
                  name: data.name,
                  lat: data.lat,
                  lng: data.lng,
                  pwd: data.pwd,
                  address: data.address,
                  id: data.id,

              };
              locs.push(obj);
              $('#content_box').addClass("hidden");
              setupMap(data.lat, data.lng);
              reset_fields();
            }
        });
    }

    //Resets location object
    function reset_location(loc)
    {
      loc.lat = null;
      loc.lng = null;
      loc.name = "";
      loc.address = "";
      loc.pwd = null;
      loc.id = null;
    }

    //Resets input fields
    function reset_fields()
    {
      $(".net_nickname").val("");
      $(".net_address").val("");
      $(".net_pass").val(null);
      $('.search_field').val("");
    }

    //Define function which converts a number to Rad
    Number.prototype.toRad = function() {
       return this * Math.PI / 180;
    }

    //Haversine formula to get distance between points based on coordinates
    function calculate_distance(loc1, loc2)
    {
      var lat2 = loc2.lat; 
      var lon2 = loc2.lng; 
      var lat1 = loc1.lat; 
      var lon1 = loc1.lng; 

      var R = 6371; // km, for miles is 3961
      var x1 = lat2-lat1;
      var dLat = x1.toRad();  
      var x2 = lon2-lon1;
      var dLon = x2.toRad();  
      var a = Math.sin(dLat/2) * Math.sin(dLat/2) + 
                      Math.cos(lat1.toRad()) * Math.cos(lat2.toRad()) * 
                      Math.sin(dLon/2) * Math.sin(dLon/2);  
      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
      var d = R * c; 
      return d;
    }

    //Generates ordered list of object by distance based on cur_loc
    function generate_list_by_distance(loc)
    {
      sorted_locs_by_distance = [];
      for(var i=0; i<locs.length; i++)
      {
        distance = calculate_distance(loc, locs[i]);
        locs[i].distance = distance;
        sorted_locs_by_distance.push(locs[i]);
      }

      sorted_locs_by_distance.sort(function(a, b) { 
          return a.distance - b.distance;
      });

    }

////////////////////////////////////////////////////////////////////////////////

  // Event handlers to test generation of list by distance
    $('#calculate').click(function()
    {
      generate_list_by_distance(cur_loc);
    });

    $('#reset').click(function()
    {
      sorted_locs_by_distance = [];
      console.log(sorted_locs_by_distance);
    });


    ////////////////*****************\\\\\\\\\\\\\\\\\\
    //                                                \\
    //                EVENT HANDLERS                  \\
    //                                                \\
    ////////////////*****************\\\\\\\\\\\\\\\\\\\

    
    // Moves map back to last saved current location
    $('#addLoc').click(function(ev)
    {
        current_location.name = $(".net_nickname").val();
        current_location.address = $(".net_address").val();

        setupMap(current_location.lat, current_location.lng);
    });

    //Refreshes the current location of the user
    $('#refreshLoc').click(function(ev)
    {
        cur_loc.name = $(".net_nickname").val();
        cur_loc.address = $(".net_address").val();

        getLocation();
    });

  // Search action: Moves map and adds marker to first result of search

  $('#search_btn').click( function(ev){
    reset_location(cur_loc);
    var address = $(".search_field").val();
    geocoder.geocode( { 'address': address}, function(results, status) {
      if (status == google.maps.GeocoderStatus.OK) 
      {
        cur_loc.lat = results[0].geometry.location.d;
        cur_loc.lng = results[0].geometry.location.e;
        cur_loc.name = address;
        cur_loc.address = address;
        
        $('.net_address').val(address);

        //Generates list order by distance from search point of existing locations 
        generate_list_by_distance(cur_loc);

        setupMap(cur_loc.lat, cur_loc.lng);
        addNewLocMarker(cur_loc, map);

      } 
      else {
        alert("Geocode was not successful for the following reason: " + status);
      }
    });  
  });
   

    // Adds new location: First checks user input for required fields and then calls function
    //for ajax call which adds network to the db.
    $('#add_net_btn').click(function(ev)
    {
        cur_loc.name = $(".net_nickname").val();
        cur_loc.address = $(".net_address").val();
        
        try
        {
          cur_loc.pwd = $(".net_pass").val();
          if (cur_loc.pwd == null || cur_loc.pwd == "")
          {
            var confirmation = confirm('Add network with no password?');
            if (confirmation == true)
            {
              cur_loc.pwd = "";
              if(cur_loc.name=="" || cur_loc.address=="")
                alert ("Please fill in all fields");
              else
                add_loc_to_db(cur_loc);
            }
            else
              cur_loc.pwd = null;
          }
          else if(cur_loc.name != "" && cur_loc.address != "")
            add_loc_to_db(cur_loc);
          else
            alert('Please fill in all fields');
        }
        catch(err)
        {
          alert('catch');
          var confirmation = confirm('Add network with no password?');
          if (confirmation == true)
          {
            cur_loc.pwd = "";
            if(cur_loc.name=="" || cur_loc.address=="")
              alert ("Please fill in all fields");
            else if(cur_loc.name != "" && cur_loc.address != "")
              add_loc_to_db(cur_loc);
            else
              alert('Please fill in all fields');
          }
          else
            cur_loc.pwd = null;
        }
      
    });

    $('#cancel_add_btn').click(function(){
      $('#content_box').addClass("hidden");
    });

    $('#cancel_edit_btn').click(function(){
      $('#edit_content_box').addClass("hidden");
    });

    function deleteNetwork(network_id)
    {
      $.ajax({
        url: "/locations/" + network_id,
        type: 'DELETE',
        beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
        data: { id: network_id },
        success: function(data){
          locs = [];
          for(var i=0; i<data.length; i++)
          {
              var obj = {
                  name: data[i].name,
                  lat: data[i].lat,
                  lng: data[i].lng,
                  pwd: data[i].pwd,
                  address: data[i].address,
                  id: data[i].id
                };
              locs.push(obj);
          }
          reset_location(cur_loc);
          cur_loc.lat = current_location.lat;
          cur_loc.lng = current_location.lng;
          setupMap(cur_loc.lat, cur_loc.lng);
        }
      });
    }

    //Gets the networks data from DB and calls setEditFields
    function editNetwork(network_id)
    {
      var location;
      $.ajax({
        url: "/locations/" + network_id + "/edit",
        beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
        data: { id: network_id },
        success: function(data){
          cur_loc = data;
          setEditFields(cur_loc);
        }
      });
    }

    //Updates DB by adding network to the location of the user specified
    function shareNetwork(network_id)
    {
      email = $('.share_email_field').val();
      $.ajax({
        url: "/locations/" + network_id + "/share",
        beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
        data: { id: network_id, email: email },
        success: function(data){
          cur_loc = data;
          alert("Locations has been successfully shared!");
          //setEditFields(cur_loc);
        }
      });
    }

    //Popoulates the edit form fields
    function setEditFields(loc)
    {
      $(".edit_net_nickname").val(loc.name);
      $('.edit_net_address').val(loc.address);
      $('.edit_net_pass').val(loc.pwd);
      //$('#edit_content_box').removeClass("hidden");
    }

    function editNetworkAjax(name, address, pwd)
    { 
      //console.log(cur_loc.id);
      var url = "/locations/" + cur_loc.id;
      $.ajax({
          url: url,
          type: "PUT",
          beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
          data: { name: name, address: address, pwd: pwd, id: cur_loc.id },
          success: function(data){
            locs = [];
            for(var i=0; i<data.length; i++)
            {
                var obj = {
                    name: data[i].name,
                    lat: data[i].lat,
                    lng: data[i].lng,
                    pwd: data[i].pwd,
                    address: data[i].address,
                    id: data[i].id
                  };
                locs.push(obj);
                $('#edit_content_box').addClass("hidden");
            }
            setupMap(cur_loc.lat, cur_loc.lng);
          }
      });
    }

    //Event handler for click of edit button in edit form. AJAX request to update network and then sets up map
    $("#edit_net_btn").click(function(ev){

      cur_loc.name = $(".edit_net_nickname").val();
        cur_loc.address = $(".edit_net_address").val();
        
        try
        {
          cur_loc.pwd = $(".edit_net_pass").val();
          if (cur_loc.pwd == null || cur_loc.pwd == "")
          {
            var confirmation = confirm('Add network with no password?');
            if (confirmation == true)
            {
              cur_loc.pwd = "";
              if(cur_loc.name=="" || cur_loc.address=="")
                alert ("Please fill both Name and Address");
              else
                editNetworkAjax(cur_loc.name, cur_loc.address, cur_loc.pwd);
            }
            else
              cur_loc.pwd = null;
          }
          else if(cur_loc.name != "" && cur_loc.address != "")
            editNetworkAjax(cur_loc.name, cur_loc.address, cur_loc.pwd);
          else
            alert('Please fill in all fields');
        }
        catch(err)
        {
          alert('catch');
          var confirmation = confirm('Add network with no password?');
          if (confirmation == true)
          {
            cur_loc.pwd = "";
            if(cur_loc.name=="" || cur_loc.address=="")
              alert ("Please fill in all fields");
            else if(cur_loc.name != "" && cur_loc.address != "")
              editNetworkAjax(cur_loc.name, cur_loc.address, cur_loc.pwd);
            else
              alert('Please fill in all fields');
          }
          else
            cur_loc.pwd = null;
        }

      // cur_loc.name = $(".edit_net_nickname").val();
      // cur_loc.address = $('.edit_net_address').val();
      // cur_loc.pwd = $('.edit_net_pass').val();

      // editNetworkAjax(cur_loc.name, cur_loc.address, cur_loc.pwd);
    });
  

  function populateSideTab()
  {
    $('#loc_net_list').html('');
    for(var i=0; i<sorted_locs_by_distance.length; i++)
    {
      $('#loc_net_list').append( '<div class="net_info"><table><tr class="net_nickname"><td class="boldify">Nickname:</td><td>' + sorted_locs_by_distance[i].name + '</td></tr><tr class="net_realname"><td class="boldify">Network:</td><td>' + sorted_locs_by_distance[i].address + '</td></tr><tr class="net_pass"><td class="boldify">Password:</td><td>' + sorted_locs_by_distance[i].pwd + '</td></tr><tr class="net_distance"><td class="boldify">Distance:</td><td>' + Math.round((sorted_locs_by_distance[i].distance) * 100)/100 + 'km</td></tr></table><input type="submit" id="edit_net_btn" value="Edit"><input type="submit" id="delete_net_btn" value="Delete"><input type="submit" id="share_net_btn" value="Share"></div>' );
    }
  }
  
  //Gets gps location and populates map upon load
  getLocation();
    
})();

});
</script>
<!-- <div>
    <button id='addLoc'>Show Current Location</button>
    <button id='refreshLoc'>Refresh Location</button>
    <p id='msg'></p>
    <input type="text" class="search_field" placeholder="search address">
    <button id="search_btn">Search</button>
    <input type="text" class="net_nickname" placeholder="nickname">
    <input type="text" class="net_address" placeholder="address">
    <input type="text" class="net_pass" placeholder="password">

    <button id="add_net_btn">Add Location</button>
    <button id="remove_net_btn">Remove Location</button>
    <button id="calculate">Calculate distance</button>
    <button id="reset">Reset distance</button>
    <hr>
    <p>Edit form</p>
    <input type="text" class="edit_name_field" placeholder="name">
    <input type="text" class="edit_address_field" placeholder="address">
    <input type="text" class="edit_password_field" placeholder="password">
    <input type="hidden" name="edit_net_id" value="Norway">
    <button id = 'edit_net_btn'>Edit</button>

  </div> -->



<div id='map-canvas'>
</div> <!-- closes #map-canvas -->


<div id="search-stuff">
  <input type="text" class="search_field" placeholder="search address">
  <input type="submit" id="search_btn" value="Search">
</div>

<div id="content_box" class="hidden">

  <div id="location" class="sixteen columns alpha omega">
    <div id="loc_form">
      <form>
        <h2>Network Information</h2>
        <table>
        <tr>
          <td>Name:</td>
          <td><input type="text" class="net_nickname"></td>
        </tr>
<!--         <tr>
          <td>Network name:</td>
          <td><input type="text" class="net_realname"></td>
        </tr> -->
        <tr>
          <td>Street Address:</td>
          <td><input type="text" class="net_address"></td>
        </tr>
        <tr>
          <td>Password:</td>
          <td><input type="text" class="net_pass"></td>
        </tr>
        </table>
        <button id="add_net_btn">Add Location</button>
        <button id="cancel_add_btn">Cancel</button>
      </form>
    </div> <!-- closes #loc_form -->
  </div> <!-- closes #location -->
</div> <!-- closes #content_box -->

<div id="edit_content_box" class="hidden">

  <div id="location" class="sixteen columns alpha omega">
    <div id="loc_form">
      <form>
        <h2>Network Information</h2>
        <table>
        <tr>
          <td>Name:</td>
          <td><input type="text" class="edit_net_nickname"></td>
        </tr>
<!--         <tr>
          <td>Network name:</td>
          <td><input type="text" class="edit_net_realname"></td>
        </tr> -->
        <tr>
          <td>Street Address:</td>
          <td><input type="text" class="edit_net_address"></td>
        </tr>
        <tr>
          <td>Password:</td>
          <td><input type="text" class="edit_net_pass"></td>
        </tr>
        </table>
        <button id="edit_net_btn">Edit Location</button>
        <button id="cancel_edit_btn">Cancel</button>
      </form>
    </div> <!-- closes #loc_form -->
  </div> <!-- closes #location -->
</div> <!-- closes #content_box -->

<!-- <input type="text" class="net_nickname" placeholder="nickname">
<input type="text" class="net_address" placeholder="address">
<input type="text" class="net_pass" placeholder="password">
<button id="add_net_btn">Add Location</button> -->

<code id="jq1" class="html" style="overflow:auto">
  <div id="extruderRight" class="{title:'List View'}">
    <div class="content">
      <div id="loc_net_list">
      </div>
    </div>
  </div>
</code>

<code id="jq1" class="html" style="overflow:auto">
  <div id="extruderBottom" class="{title:'Chat'}">
    <div class="content">
      <div id="chat_window">
        <table>
          <tr id="current_user" class="chatline">
            <td class="boldify">nicollecastrog_puppy@gmail.com</td>
            <td>Hey Jake, how are you?</td>
          </tr>
          <tr id="other_user" class="chatline">
            <td class="boldify">jakeloveslondon@gmail.com</td>
            <td>Good good, you?</td>
          </tr>
          <tr id="other_user" class="chatline">
            <td class="boldify">tomjones@gmail.com</td>
            <td>Thanks for asking how I am guys!</td>
          </tr>
          <tr id="current_user" class="chatline">
            <td class="boldify">nicollecastrog_puppy@gmail.com</td>
            <td>Sorry Tom...</td>
          </tr>
          <tr id="current_user" class="chatline">
            <td class="boldify">nicollecastrog_puppy@gmail.com</td>
            <td>Hey Jake, how are you?</td>
          </tr>
          <tr id="other_user" class="chatline">
            <td class="boldify">jakeloveslondon@gmail.com</td>
            <td>Good good, you?</td>
          </tr>
          <tr id="other_user" class="chatline">
            <td class="boldify">tomjones@gmail.com</td>
            <td>Thanks for asking how I am guys!</td>
          </tr>
          <tr id="current_user" class="chatline">
            <td class="boldify">nicollecastrog_puppy@gmail.com</td>
            <td>Sorry Tom...</td>
          </tr>
          <tr id="current_user" class="chatline">
            <td class="boldify">nicollecastrog_puppy@gmail.com</td>
            <td>Sorry Tom...</td>
          </tr>
          <tr id="current_user" class="chatline">
            <td class="boldify">nicollecastrog_puppy@gmail.com</td>
            <td>Hey Jake, how are you?</td>
          </tr>
          <tr id="other_user" class="chatline">
            <td class="boldify">jakeloveslondon@gmail.com</td>
            <td>Good good, you?</td>
          </tr>
          <tr id="other_user" class="chatline">
            <td class="boldify">tomjones@gmail.com</td>
            <td>Thanks for asking how I am guys!</td>
          </tr>
          <tr id="current_user" class="chatline">
            <td class="boldify">nicollecastrog_puppy@gmail.com</td>
            <td>Sorry Tom...</td>
          </tr>
        </table>
      </div> <!-- closes #chat_window -->
      <div id="chat_enter_text">
        <input type="text" class="chat_input" placeholder="type message then press enter to send">
      </div>
    </div>
  </div>
  </code>









